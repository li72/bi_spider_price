package com.yiniu.bi.process.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.HtmlElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.yiniu.bi.main.MainStart;
import com.yiniu.bi.model.ProxyInfo;
import com.yiniu.bi.model.Result;
import com.yiniu.bi.model.UrlSource;
import com.yiniu.bi.process.IProcessService;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.htmlcleaner.HtmlCleaner;
import org.htmlcleaner.TagNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * //                       _oo0oo_
 * //                      o8888888o
 * //                      88" . "88
 * //                      (| -_- |)
 * //                      0\  =  /0
 * //                    ___/`---'\___
 * //                  .' \\|     |// '.
 * //                 / \\|||  :  |||// \
 * //                / _||||| -:- |||||- \
 * //               |   | \\\  -  /// |   |
 * //               | \_|  ''\---/''  |_/ |
 * //               \  .-\__  '-'  ___/-. /
 * //             ___'. .'  /--.--\  `. .'___
 * //          ."" '<  `.___\_<|>_/___.' >' "".
 * //         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 * //         \  \ `_.   \_ __\ /__ _/   .-` /  /
 * //     =====`-.____`.___ \_____/___.-`___.-'=====
 * //                       `=---='
 * //
 * //
 * //     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * //
 * //               佛祖保佑         永无BUG
 * //
 *
 * @author Michael Kong
 * @date 2015/12/24
 */
@Service("tmallProcess")
public class TmallProcessImpl implements IProcessService {

    private static Logger LOGGER = LoggerFactory
            .getLogger(YHDProcessImpl.class);

    public static final String TMALL_PRICE_PRE = "https://mdskip.taobao.com/core/initItemDetail.htm?isApparel=false&showShopProm=false&queryMemberRight=true&tryBeforeBuy=false&isForbidBuyItem=false&isRegionLevel=true&addressLevel=3&offlineShop=false&tmallBuySupport=true&service3C=false&progressiveSupport=false&household=false&isAreaSell=true&isUseInventoryCenter=true&isSecKill=false&cartEnable=true&sellerPreview=false&callback=onMdskip&ref=https%253A%252F%252Flist.tmall.com%252Fsearch_product.htm%253Fq%253D%2525BC%2525A6%2526user_id%253D1129326215%2526type%253Dp%2526cat%253D50514008%2526spm%253Da3204.7084717.a2227oh.d100%2526from%253Dchaoshi.index.pc_1_searchbutton&brandSiteId=0";
    public static final String TMALL_PRICE_TTME = "&cachedTimestamp=";
    public static final String TMALL_PRICE_ITEM_ID = "&itemId=";
    public static String TMALL_PRICE_XPATH = "/*//*[@id=\"J_PromoPrice\"]/dd/div/span";
    public static String TMALL_NAME_XPATH = "//*[@id=\"J_DetailMeta\"]/div[1]/div[1]/div/div[1]/h1";
    public static int WAIT_JS_TIME = 5000;
    public static int WAIT_TIMES = 2;


    @Override
    public Result process(UrlSource source, ProxyInfo proxyInfo) throws Exception {
        long start = System.currentTimeMillis();

        String url = source.getUrl();
        if (StringUtils.isBlank(url)) {
            return null;
        }

        url = url.replaceAll("`", "");
        url = url.replaceAll("\\^", "");

        String hederKey = "user-agent";
        String headerBrowserVal = MainStart.getBrowser();

        HttpClientBuilder build = HttpClients.custom();
        CloseableHttpClient client = build.build();
        HttpGet httpGet = new HttpGet(url);
        httpGet.setHeader(hederKey, headerBrowserVal);
        CloseableHttpResponse response = client.execute(httpGet);
        HttpEntity entity = response.getEntity();

        System.out.println(url);

        String htmlContent = EntityUtils.toString(entity);

        Result result = new Result();
        // 获取名称
        try {
            result.setName(parseProductNameWithCleaner(htmlContent));
        } catch (Exception e) {
            if (e instanceof ConnectTimeoutException) {
                // 访问过于频繁被封
                LOGGER.error("访问天猫超市URL过于频繁，URL=" + url, e);
                throw e;
            } else {
                LOGGER.error("解析天猫超市产品名称出错，URL=" + url, e);
                result.setName("获取名称失败");
            }
        }

        String itemId = null;
        try {
            itemId = getItemId(url);
        } catch (Exception e) {
            LOGGER.error("解析天猫超市itemId出错，URL=" + url, e);
            throw e;
        }

        String priceAjaxUrl = TMALL_PRICE_PRE + TMALL_PRICE_TTME + System.currentTimeMillis() + TMALL_PRICE_ITEM_ID + itemId;

        // 获取销售价格促销价
        httpGet = new HttpGet(priceAjaxUrl);
        httpGet.setHeader(hederKey, headerBrowserVal);
        httpGet.setHeader("referer", url);
        response = client.execute(httpGet);
        entity = response.getEntity();
        String priceJsonContent = EntityUtils.toString(entity);

        try {
            parsePrice(priceJsonContent, result);
        } catch (Exception e) {
            LOGGER.error("解析天猫超市价格信息出错，URL=" + url + ", json=" + priceJsonContent, e);
        }

        result.setUseTime((System.currentTimeMillis() - start));
        source.setResult(result);

        return result;
    }

    @Override
    public Result process(WebClient webClient, UrlSource source) throws Exception {
        long start = System.currentTimeMillis();
        if (StringUtils.isBlank(source.getUrl())) {
            return null;
        }

        HtmlPage rootPage = webClient.getPage(source.getUrl());

        HtmlElement priceSpanNode = null;
        HtmlElement nameNode = null;
        /*for (int i = 0; i < WAIT_TIMES; i++) {
            // 等待JS执行
            Thread.sleep(WAIT_JS_TIME);
            priceSpanNode = rootPage.getFirstByXPath(TMALL_PRICE_XPATH);
            nameNode = rootPage.getFirstByXPath(TMALL_NAME_XPATH);

            if (priceSpanNode != null && nameNode != null) {
                // 获取到页面元素
                break;
            }
        }*/
        Thread.sleep(10000);
        priceSpanNode = rootPage.getFirstByXPath(TMALL_PRICE_XPATH);
        nameNode = rootPage.getFirstByXPath(TMALL_NAME_XPATH);

        // 等待JS时间过后仍然没有获取到数据
        if (priceSpanNode == null || nameNode == null) {
            return null;
        }

        Result result = new Result();
        try {
            result.setPrice(Double.parseDouble(priceSpanNode.getFirstChild().toString()));
        } catch (NumberFormatException e) {

        }
        result.setName(nameNode.getFirstChild().toString());
        result.setUseTime((System.currentTimeMillis() - start));

        source.setResult(result);
        return result;
    }

    private void parsePrice(String priceContent, Result result) {
        int beginIndex = priceContent.indexOf("(");
        String preFormat = priceContent.substring(beginIndex + 1);
        String json = preFormat.substring(0, preFormat.length() - 1);
        JSONObject jsonObject = (JSONObject) JSONObject.parse(json);
        JSONObject defaultModel = (JSONObject) jsonObject.get("defaultModel");
        JSONObject itemPriceResultDO = (JSONObject) defaultModel.get("itemPriceResultDO");
        JSONObject priceInfo = (JSONObject) itemPriceResultDO.get("priceInfo");
        JSONObject def = (JSONObject) priceInfo.get("def");
        result.setPrice(Double.parseDouble((String) def.get("price")));
        JSONArray promotionList = def.getJSONArray("promotionList");
        if (promotionList != null) {
            JSONObject promotion = (JSONObject) promotionList.get(0);
            result.setPromPrice(Double.parseDouble((String) promotion.get("price")));
        }
    }

    private String parseProductNameWithCleaner(String content) throws Exception {
        if (content.contains("频繁") || content.contains("验证码")) {
            // 访问过于频繁被封
            throw new ConnectTimeoutException();
        }
        HtmlCleaner htmlCleaner = new HtmlCleaner();
        TagNode rootNode = htmlCleaner.clean(content);
        Object[] objects = rootNode.evaluateXPath(TMALL_NAME_XPATH);
        TagNode nameNode = (TagNode) objects[0];
        return nameNode.getText().toString().replaceAll("\\r","").replaceAll("\\n","");
    }

    private String getItemId(String url) {
        Pattern pattern = Pattern.compile("[&|\\?]id=[0-9]*");
        Matcher matcher = pattern.matcher(url);
        while (matcher.find()) {
            return matcher.group().split("=")[1];
        }
        return null;
    }

}
