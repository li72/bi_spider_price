package com.yiniu.bi.common;

import com.alibaba.fastjson.JSONObject;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * //                       _oo0oo_
 * //                      o8888888o
 * //                      88" . "88
 * //                      (| -_- |)
 * //                      0\  =  /0
 * //                    ___/`---'\___
 * //                  .' \\|     |// '.
 * //                 / \\|||  :  |||// \
 * //                / _||||| -:- |||||- \
 * //               |   | \\\  -  /// |   |
 * //               | \_|  ''\---/''  |_/ |
 * //               \  .-\__  '-'  ___/-. /
 * //             ___'. .'  /--.--\  `. .'___
 * //          ."" '<  `.___\_<|>_/___.' >' "".
 * //         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 * //         \  \ `_.   \_ __\ /__ _/   .-` /  /
 * //     =====`-.____`.___ \_____/___.-`___.-'=====
 * //                       `=---='
 * //
 * //
 * //     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * //
 * //               佛祖保佑         永无BUG
 * //
 *
 * @author Michael Kong
 * @date 2015/12/24
 */
public class MainTest {

    public static BlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(5);

    public static void main(String[] args) {
        /*Thread t1 = new Thread(new ThreadTest());
        t1.setName("t1");
        Thread t2 = new Thread(new ThreadTest());
        t2.setName("t2");

        t1.start();
        t2.start();*/

        /*String url = "http://item.yhd.com/item/42271487?tc=3.0.5.42271487.3&tp=51.%E5%B0%8F%E8%82%A5%E7%BE%8A%E6%B8%85%E6%B1%A4%E7%81%AB%E9%94%85%E5%BA%95%E6%96%99110g.124.3.1.L60nxJ-11-3HAaK";
        int i = url.indexOf("?");
        System.out.println(url.substring(25,i));

        String s = "jQuery111306277138183359057_1450844554317({\"badgeDiscount\":0,\"badgeDiscountRate\":100,\"canSale\":1,\"canShow\":1,\"channelId\":1,\"channelIdList\":\"[1]\",\"curPriceType\":2,\"currentMerchantId\":3,\"currentPrice\":72.9,\"currentPriceType\":2,\"currentPriceWithoutBadge\":72.9,\"currentStockNum\":1000,\"currentTime\":1450945787030,\"isQueuing\":0,\"localStock\":1000,\"marketPrice\":80,\"merchantId\":3,\"mutexPromotion\":0,\"normalStock\":1000,\"payNum\":0,\"pmId\":2334407,\"priceChangeRemind\":0,\"productId\":2067289,\"productPrice\":72.9,\"productStock\":1000,\"productType\":0,\"promPrice\":72.9,\"promoteType\":1,\"remainTime\":631811970,\"ruleId\":315906132,\"ruleType\":0,\"s\":\"2ca65\",\"saleType\":1,\"samMemberPrice\":\"null\",\"shareStockNum\":0,\"shoppingcount\":0,\"soldNum\":0,\"taxAmt\":0E-8,\"taxFreeAmt\":50,\"totalLimitNum\":0,\"userLimitNum\":0,\"userPriceLimitNumber\":0,\"vs\":0,\"yhdPrice\":79.9})";
        int i1 = s.indexOf("(");
        System.out.println(s.substring(i1 + 1));
        String pre = s.substring(i1 + 1);
        System.out.println(pre.substring(0,pre.length()-1));
        String sss = pre.substring(0, pre.length() - 1);
        JSONObject jsonObject = (JSONObject) JSONObject.parse(sss);
        System.out.println(jsonObject.get("currentPrice"));


        String illeaga = "http://item.yhd.com/item/46926933?tc=3.0.5.46926933.2&tp=51.%E6%84%8F%E5%88%A9.124.2.1.L61hOOu-10-C`xUe";
        System.out.println(illeaga);
        System.out.println(illeaga.replaceAll("`",""));

        String illeaga2 = "http://item.yhd.com/item/51805598?tc=3.0.5.51805598.1&tp=51.%E6%B4%8B%E4%B8%80.124.1.1.L61e^zt-10-CxUe";
        System.out.println(illeaga2);
        System.out.println(illeaga2.replaceAll("\\^", ""));

        String s3 = "http://item.yhd.com/item/1088244";
        System.out.println(s3.substring(25));*/

        /*AtomicInteger test = new AtomicInteger();
        System.out.println(test.incrementAndGet());
        System.out.println(test.incrementAndGet());
        System.out.println(test.incrementAndGet());
        System.out.println(test.incrementAndGet());
        test.set(0);
        System.out.println(test.incrementAndGet());
        System.out.println(test.incrementAndGet());
        System.out.println(test.incrementAndGet());
        System.out.println(test.incrementAndGet());*/

        //System.out.println(System.currentTimeMillis());

        /*String test = "</script>\n" +
                "<meta name=\"tp_page\" content=\"YHD_DETAIL.2886123\">\n" +
                "<title>Binggrae宾格瑞 香蕉味牛奶饮料 200ml 韩国进口-1号店</title>\n" +
                "<meta name=\"Keywords\" content=\"Binggrae宾格瑞 香蕉味牛奶饮料 200ml 韩国进口\">";
        int pre = test.indexOf("content=\"YHD_DETAIL.");
        //System.out.println(test.substring(pre + 20));
        String newTest = test.substring(pre + 20);
        int end = newTest.indexOf("\"");
        System.out.println(newTest.substring(0,end));*/

        //JSONObject jsonObject = (JSONObject) JSONObject.parse("null");

        ApplicationContext ac = new ClassPathXmlApplicationContext("classpath:spring/spring.xml");
        System.out.println(ac);

    }


}


class ThreadTest implements Runnable{


    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName() + "准备获取队列");
        Integer num = null;
        try {
            num = MainTest.queue.poll(3l, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(num);
        System.out.println(Thread.currentThread().getName() + "结束获取队列");
    }
}
