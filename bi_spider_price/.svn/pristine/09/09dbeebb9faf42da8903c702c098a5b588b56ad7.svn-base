package com.yiniu.bi.main;

import com.yiniu.bi.model.ProxyInfo;
import com.yiniu.bi.model.Result;
import com.yiniu.bi.model.UrlSource;
import com.yiniu.bi.process.IProcessService;
import com.yiniu.bi.process.impl.TmallProcessImpl;
import com.yiniu.bi.process.impl.YHDProcessImpl;
import com.yiniu.bi.process.impl.YHDTempProcessImpl;
import com.yiniu.bi.store.IStore;
import org.apache.http.conn.HttpHostConnectException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.net.ConnectException;
import java.net.SocketException;

/**
 * //                       _oo0oo_
 * //                      o8888888o
 * //                      88" . "88
 * //                      (| -_- |)
 * //                      0\  =  /0
 * //                    ___/`---'\___
 * //                  .' \\|     |// '.
 * //                 / \\|||  :  |||// \
 * //                / _||||| -:- |||||- \
 * //               |   | \\\  -  /// |   |
 * //               | \_|  ''\---/''  |_/ |
 * //               \  .-\__  '-'  ___/-. /
 * //             ___'. .'  /--.--\  `. .'___
 * //          ."" '<  `.___\_<|>_/___.' >' "".
 * //         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 * //         \  \ `_.   \_ __\ /__ _/   .-` /  /
 * //     =====`-.____`.___ \_____/___.-`___.-'=====
 * //                       `=---='
 * //
 * //
 * //     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * //
 * //               佛祖保佑         永无BUG
 * //
 *
 * @author Michael Kong
 * @date 2015/12/24
 */
@Service("mainTempThread")
@Scope("prototype")
public class MainTempThread implements Runnable {

    private static Logger LOGGER = LoggerFactory
            .getLogger(MainTempThread.class);

    private IProcessService processService;

    @Autowired
    private IStore mysqlTempStore;

    public void run() {
        while (!isStop() && !Thread.currentThread().isInterrupted()) {
            LOGGER.info(getThreadName() + "执行PK商品解析+++++++");
            // 获取url
            UrlSource urlSource = getUrl();
            if (urlSource == null) {
                LOGGER.info(getThreadName() + "PK商品URL队列没有数据，开始睡眠10分钟...");
                try {
                    threadSleep(10 * 60);
                } catch (InterruptedException e) {
                    LOGGER.info(getThreadName() + "PK商品线程睡眠中断...", e);
                }
                LOGGER.info(getThreadName() + "PK商品URL睡眠10分钟结束...");
                continue;
            }
            if ("yhd".equals(urlSource.getType())) {
                //一号店
                parseYHD(urlSource);
                try {
                    //threadSleep(getSleepSec());
                    threadSleep(3);
                } catch (InterruptedException e) {
                    LOGGER.info(getThreadName() + "PK商品线程睡眠中断...", e);
                }
                MainTempStart.YHD_EXECUTE_NUM.incrementAndGet();
            }
        }
    }



    private void parseYHD(UrlSource urlSource) {
        //获取代理链接
        ProxyInfo proxyInfo = getProxy();
        processService = new YHDTempProcessImpl();
        try {
            Result result = processService.process(urlSource, proxyInfo);
            if (result != null) {
                mysqlTempStore.save(urlSource);
            }
        } catch (Exception e) {
            LOGGER.info("PK商品解析一号店信息遇到异常" + urlSource, e);
        }

    }

    private boolean isStop() {
        return MainTempStart.STOP;
    }

    private UrlSource getUrl() {
        return MainTempStart.SOURCE_QUEUE_TEMP.poll();
    }

    private void putUrl(UrlSource urlSource) {
        MainTempStart.SOURCE_QUEUE_TEMP.offer(urlSource);
    }

    private ProxyInfo getProxy() {
        return MainTempStart.PROXY_QUEUE_TEMP.poll();
    }

    private void putProxy(ProxyInfo proxyInfo) {
        //MainTempStart.PROXY_QUEUE.offer(proxyInfo);
    }

    private void threadSleep(int second) throws InterruptedException {
        Thread.sleep(second * 1000);
    }

    private int getRandom(int seed) {
        return (int) (Math.random() * seed) + 1;
    }

    private int getSleepSec() {
        return getRandom(7) + 3;
    }

    private String getThreadName() {
        return Thread.currentThread().getName();
    }


}
