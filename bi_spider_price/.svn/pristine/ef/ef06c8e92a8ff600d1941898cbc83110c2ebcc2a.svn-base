package com.yiniu.bi.main;

import com.yiniu.bi.model.ProxyInfo;
import com.yiniu.bi.model.UrlSource;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Service;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * //                       _oo0oo_
 * //                      o8888888o
 * //                      88" . "88
 * //                      (| -_- |)
 * //                      0\  =  /0
 * //                    ___/`---'\___
 * //                  .' \\|     |// '.
 * //                 / \\|||  :  |||// \
 * //                / _||||| -:- |||||- \
 * //               |   | \\\  -  /// |   |
 * //               | \_|  ''\---/''  |_/ |
 * //               \  .-\__  '-'  ___/-. /
 * //             ___'. .'  /--.--\  `. .'___
 * //          ."" '<  `.___\_<|>_/___.' >' "".
 * //         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 * //         \  \ `_.   \_ __\ /__ _/   .-` /  /
 * //     =====`-.____`.___ \_____/___.-`___.-'=====
 * //                       `=---='
 * //
 * //
 * //     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * //
 * //               佛祖保佑         永无BUG
 * //
 *
 * @author Michael Kong
 * @date 2015/12/24
 */
@Service("mainTempStart")
public class MainTempStart implements ApplicationContextAware {

    private ApplicationContext applicationContext;

    public static BlockingQueue<UrlSource> SOURCE_QUEUE_TEMP = new ArrayBlockingQueue<UrlSource>(10000);
    public static BlockingQueue<ProxyInfo> PROXY_QUEUE_TEMP = new ArrayBlockingQueue<ProxyInfo>(10000);
    public static BlockingQueue<UrlSource> CONNECT_ERROR_SOURCE_QUEUE_TEMP = new ArrayBlockingQueue<UrlSource>(10000);
    public static ExecutorService THREAD_POOL = Executors.newFixedThreadPool(2);
    public static AtomicInteger YHD_EXECUTE_NUM = new AtomicInteger();
    public static volatile boolean YHD_SLEEP = false;
    public static volatile boolean STOP = false;

    public static String[] BROWSERS = {
            "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11",
            "Opera/9.25 (Windows NT 5.1; U; en)",
            "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
            "Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12",
            "Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Ubuntu/11.04 Chromium/16.0.912.77 Chrome/16.0.912.77 Safari/535.7",
            "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0"
    };

    public void start() {
        for (int i = 0; i < 2; i++) {
            THREAD_POOL.execute((MainTempThread) applicationContext.getBean("mainTempThread"));
        }
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    public static String getBrowser() {
        int length = BROWSERS.length;
        return BROWSERS[(int)(Math.random() * length)];
    }
}
