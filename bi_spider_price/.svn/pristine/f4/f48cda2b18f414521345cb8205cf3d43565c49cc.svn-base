package com.yiniu.bi.store.impl;

import com.yiniu.bi.dao.IBaseDao;
import com.yiniu.bi.model.Result;
import com.yiniu.bi.model.UrlSource;
import com.yiniu.bi.store.IStore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * //                       _oo0oo_
 * //                      o8888888o
 * //                      88" . "88
 * //                      (| -_- |)
 * //                      0\  =  /0
 * //                    ___/`---'\___
 * //                  .' \\|     |// '.
 * //                 / \\|||  :  |||// \
 * //                / _||||| -:- |||||- \
 * //               |   | \\\  -  /// |   |
 * //               | \_|  ''\---/''  |_/ |
 * //               \  .-\__  '-'  ___/-. /
 * //             ___'. .'  /--.--\  `. .'___
 * //          ."" '<  `.___\_<|>_/___.' >' "".
 * //         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 * //         \  \ `_.   \_ __\ /__ _/   .-` /  /
 * //     =====`-.____`.___ \_____/___.-`___.-'=====
 * //                       `=---='
 * //
 * //
 * //     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * //
 * //               佛祖保佑         永无BUG
 * //
 *
 * @author Michael Kong
 * @date 2015/12/24
 */
@Service("mysqlTempStore")
public class MySqlTempStoreImpl implements IStore {

    private Logger LOGGER = LoggerFactory
            .getLogger(MySqlTempStoreImpl.class);

    @Autowired
    private IBaseDao baseDao;

    @Override
    public void save(final UrlSource urlSource) {
        JdbcTemplate template = baseDao.getTemplate();
        final String testSql = "INSERT INTO bi_spider_temp(TIME,PRICE,NAME,CODE,URL,TYPE,ADDTIME,PROMPRICE,DATE) VALUES(?,?,?,?,?,?,?,?,?)";
        final Result result = urlSource.getResult();
        template.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(testSql);
                ps.setLong(1, result.getUseTime());
                ps.setDouble(2, result.getPrice());
                ps.setString(3, result.getName());
                ps.setString(4, urlSource.getCode());
                ps.setString(5, urlSource.getUrl());
                ps.setString(6, urlSource.getType());
                ps.setLong(7, System.currentTimeMillis() / 1000);
                ps.setDouble(8, result.getPromPrice());
                ps.setString(9, urlSource.getDate());
                return ps;
            }
        });
    }
}
